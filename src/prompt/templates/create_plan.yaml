version: 3
messages:
  - role: system
    content: |
      As a large language model tasked with "{{ task }}", your role involves deconstructing it into discrete subtasks. Each subtask is defined by a 'goal', a generic 'definition' for future reuse, and 'specifics' addressing the current context. Follow these guidelines:
      - Ensure subtasks are modular with 'definition' capturing the generic, reusable component
      - Use 'specifics' to tailor the subtask to the current task requirements
      - Maintain 'goal' as a broad statement of purpose, applicable in any context
      - Make 'definition' detailed enough to function independently in a new scenario
      - Keep 'specifics' adaptable to meet the nuances of the current task
      - Consider dependencies between subtasks, but strive for independence where possible

      The plan should reflect the above structure, providing a clear framework for each subtask:
      - 'goal': The high-level objective of the subtask
      - 'definition': The generic, reusable approach or logic that addresses this type of problem
      - 'specifics': The current task-specific details necessary to achieve the 'goal'
      - 'depends_on': (optional) References to other subtasks that provide inputs or necessary context

      Before commencing the plan:
      1. Clearly understand the overarching task and individual subtask goals.
      2. Differentiate between generic and specific information for each subtask.
      3. Design each 'definition' to be a standalone skill for similar future tasks.
      4. Ensure 'specifics' are sufficiently detailed for the current task execution.

      Dissect the task thoughtfully into self-contained subtasks, keeping them clear and concise for future adaptability.

      Note: This initial breakdown is the foundation for further refinement and potential skill extraction.

  - role: user
    content: |
      The requirements for the task are:
      {{ goal | indent(6) }}

{% if plan|length > 0 %}
  - role: user
    content: |
      Here is the current plan, structured as a sequence of subtasks, each with its own 'goal', 'definition', and 'specifics', and where applicable, 'depends_on' references.
      Evaluate the plan considering its adaptability for current execution and future reusability.
      Adjust the 'definition' to ensure it remains generic, and tweak the 'specifics' to meet the immediate task needs.

      Plan steps:
      {% for item in plan %}
      - Goal: {{ item.goal | indent(10) }}
      - Definition: {{ item.definition | indent(12) }}
      - Specifics: {{ item.specifics | indent(12) }}
      {% if item.depends_on %}
      - Depends on: {{ item.depends_on | indent(16) }}
      {% endif %}
      {% endfor %}

      If the plan ensures each subtask is both self-sufficient and generalizable, select 'validate_plan' to proceed.
{% endif %}

functions:
  - name: update_plan
    description: Define the task plan as a stringified JSON array with clearly separated 'goal', 'definition', and 'specifics' for each subtask
    parameters:
      - name: plan
        type: string
        description: >
          A stringified JSON array of tasks, where each task is an object with distinct 'goal', 'definition', and 'specifics'. The 'definition' should be formulated as a generic skill, while 'specifics' handle the nuances of the current task. 'depends_on' (optional) captures any dependencies.
    required:
      - plan
  - name: ask_user
    description: Request more information or clarification from the user to ensure the clarity and independence of subtasks, as well as their potential for reuse as generic skills
    parameters:
      - name: query
        type: string
        description: The question or clarification needed to ensure the subtask's 'definition' and 'specifics' are well-formed and independent
    required:
      - query
{% if plan|length > 0 %}
  - name: validate_plan
    description: Validate the plan ensuring that each subtask's 'goal', 'definition', and 'specifics' are appropriate for both immediate execution and future reapplication as a skill
